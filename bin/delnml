#!/usr/bin/env python
import modelcfg,optparse,sys,os,re,shutil

if __name__ == "__main__":
    
    # Command line arguments
    usage = "usage: \n\t%prog [options] key1 [key2] ...\n\t%prog [options] nml1/key1 [nml2/key2] ..."
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("-f","--file",dest="nml_file",default="./gem_settings.nml",
                      help="Name of FILE containing namelist [default 'gem_settings.nml']",metavar="FILE")
    parser.add_option("-b","--backup",dest="backup",action="store_true",
                      help="Create a backup (.bkp) of the input FILE",metavar="FILE")
    parser.add_option("-n","--namelist",dest="namelist",default=None,
                      help="NAMELIST to search for keys [default all]",metavar="NAMELIST")
    (options,args) = parser.parse_args()

    # Retrieve namelist entries
    cfg = modelcfg.Settings(file=options.nml_file)

    # Check for required inputs
    if not len(args):
        parser.print_help()
        sys.exit(1)   

    # Create backup if requested
    if options.backup:
        bkpfile = options.nml_file+'.bkp'
        try:
            shutil.copy(options.nml_file,bkpfile)
        except IOError:
            sys.stderr.write('Aborting because requested backup cannot be created\n')
            raise

    # Add/modify value for key in settings file
    for key in args:
        try:
            (nml2,key2) = re.split('/',key)
        except ValueError:
            nml2 = options.namelist
            key2 = key
        try:
            value = cfg.get(key2,nml2)
            cfg.rm(key2,nml2)
        except:
            sys.stdout.write('Key not found ... skipping '+key+'\n')
            continue
        
    # Write modified settings file
    try:
        cfg.write(options.nml_file)
    except IOError:
        sys.stderr.write('Cannot write to '+options.nml_file+'\n')
        raise


        
