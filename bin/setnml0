#!/usr/bin/env python
import modelcfg,optparse,sys,os,re,shutil,string

if __name__ == "__main__":
    
    # Command line arguments
    usage = "usage: \n\t%prog [options] [-n] namelist key1=value1 [key2=value2] ...\n\t%prog [options] nml1/key1=value [nml2/key2=value] ..."
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("-f","--file",dest="nml_file",default="./gem_settings.nml",
                      help="Name of FILE containing namelist [default 'gem_settings.nml']",metavar="FILE")
    parser.add_option("-b","--backup",dest="backup",action="store_true",
                      help="Create a backup (.bkp) of the input FILE",metavar="FILE")
    parser.add_option("-n","--namelist",dest="namelist",default=None,
                      help="NAMELIST to search for keys",metavar="NAMELIST")
    (options,args) = parser.parse_args()

    # Create backup if requested
    if options.backup:
        bkpfile = options.nml_file+'.bkp'
        try:
            shutil.copy(options.nml_file,bkpfile)
        except IOError:
            sys.stderr.write('Aborting because requested backup cannot be created\n')
            raise

    # Check for required inputs
    keymode=0
    try:
        string.index(args[0], '=')
    except IndexError: 
        parser.print_help()
        sys.exit(1)
    except ValueError: 
        keymode=1

    namelist = ''
    setlist = args
    if options.namelist:
        namelist = options.namelist

    if keymode:
        try:
            namelist = args[0]
            setlist = args[1:]
        except IndexError: 
            parser.print_help()
            sys.exit(1)

    # Retrieve namelist entries
    cfg = modelcfg.Settings(file=options.nml_file)
    ## import pprint
    ## pp = pprint.PrettyPrinter(indent=4)
    ## pp.pprint(cfg)
    
    # Add/modify value for key in settings file
    for entry in setlist:
        try:
            (key,value) = re.split('=',entry)
        except ValueError:
            sys.stderr.write('Key/value pairs must be written as key=value or nml/key=value... skipping '+entry+'\n')
            continue
        try:
            (nml2,key2) = re.split('/',key)
        except ValueError:
            nml2 = namelist
            key2 = key
        cfg.set(key2,value,nml2)
    
    # Write modified settings file
    try:
        cfg.write(options.nml_file)
    except IOError:
        sys.stderr.write('Cannot write to '+options.nml_file+'\n')
        raise


        
